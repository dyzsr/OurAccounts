Title: 移动互联网技术与应用
Subtitle: Android记账软件开发报告
Author: 董岩
Email: 2016211225
Author: 倪理涵
Email: 2016211156

[TITLE]

# 系统开发的创意与背景



# 相关技术

* Javascript（ES2016版本）
* NodeJS，基于V8引擎的JS运行环境，通常用于后端和界面的开发
* React，一套用于编写UI的JS类库
* React-Native，一套使用React开发移动端本地应用的框架
* Redux，一个提供可预测程序状态的JS容器
* React-Redux，一套React和Redux相结合的框架

# 系统功能需求

这个软件主要的功能需求有记账、统计和账目的稳定保存。

## 记账功能

记账功能需要保存具体的账目信息。一条账目具体需要保存：

* 交易时间（年月日时分）
* 交易类型（收入/支出）
* 交易项目（购物、餐饮、教育……）
* 交易金额
* 对这条交易的描述（具体消费了什么……）
* 与交易相关的图片（可以有多张）
* 交易地点（可以自动获取当前位置）

记账功能要有以下用例：

* 增添新的账单条目
    * 新添的账目初始化为默认值
* 修改已有账单条目
    * 修改交易时间
    * 修改交易类型
    * 修改交易项目
    * 修改交易金额
    * 修改对交易的描述
    * 添加或删除交易相关的图片
    * 修改交易发生的地点
* 删除一条账单条目

## 统计功能

统计功能要求能够对一段时间内的交易信息加以整理，然后以较为直观的形式呈现出来。

呈现的形式分为两部分，一部分是文字信息，以列表和数字的形式呈现；另一部分是可视化信息，
以图表的形式呈现。

统计功能有以下用例：

* 查看指定月份的收入和支出总额
    * 统计一个月的收入总额
    * 统计一个月的支出总额
* 查看某一日的具体交易信息
    * 列表显示当日的所有账单
* 查看指定月份的支出和收入类别占比
    * 图表显示当月支出中各类别的占比
    * 图表显示当月收入中各类别的占比

## 账目保存功能

账目保存功能要求做到账目数据的可持久化保存，数据要在软件停止运行后稳定的存储在手机中。

唯一需要保存的数据是所有的账目，因为统计信息可以依据账目信息动态生成，不需要可持久地
存储在手机上。

# 系统设计与实现

## 系统总体设计

我们将记账软件在功能上分为四个模块：记账模块、列表统计模块、图表统计模块、和云端数据同步模块。

在软件结构上分为容器和视图两个部分，利用redux框架，视图部分负责显示和交互，容器部分存储软件
数据，通过接收视图传来的信号，对数据进行同步更新。

## 系统物理分布

系统总体目录结构：

```
OurAccounts
├── android
│   ├── app
│   ├── build
│   ├── gradle
│   ├── keystores
│   ├── build.gradle
│   ├── gradle.properties
│   ├── gradlew
│   ├── gradlew.bat
│   ├── local.properties
│   ├── OurAccounts.iml
│   └── settings.gradle
├── node_modules
├── src
│   ├── models
│   ├── views
│   ├── App.js
│   └── reducer.js
├── __tests__
│   └── App-test.js
├── app.json
├── babel.config.js
├── index.js
├── metro.config.js
├── package.json
├── yarn-error.log
└── yarn.lock
```

`index.js`是主体程序的入口，其余的源代码都存放在`src`文件夹中。`android`文件夹保存Android
项目信息，主要是React-Native框架自动生成的代码和配置文件。

`src/views`目录保存各组件的视图界面代码；`src/models`目录保存各组件数据的容器代码；
`src/reducer.js`保存Redux框架中程序的总数据容器；`src/App.js`将数据容器与视图部分结合。

## 模块设计

### 记账模块

### 列表统计模块

列表统计模块将每月的总收入和总支出显示给用户。为了方便地查看某一日的具体开支，还要能提供快捷的日期跳转功能。

在`react-native-calendars`中，提供了`Calendar`组件以显示日历。日历具有点击左右箭头按钮切换月份、单击日期触发事件等功能。

```javascript
                <Calendar
                    onDayPress={(day) =>
                        // 点击日期切换至消费详细
                        onClick(day, () => {
                            // console.warn(day);
                            navigation.navigate('monthsDetail');
                        })
                    }
                    monthFormat = { 'yyyy年M月' }
                    onMonthChange = {(month) => {
                        onChange(month);
                        onIncome(accounts);
                        onExpense(accounts);
                    }}
                />
```

同时，为了实现UI上的复用，避免多个模块风格不一致，
在`Months`类型被封装为用户可见的`MonthsView`前，我们使用`react-navigation`中的功能指定其“标题栏”的外观。

```javascript
  static navigationOptions({navigation}) {
		return {
			title: 'Months',
			header: (
				<Header>
					<Left />
					<Body>
						<Title>月份</Title>
					</Body>
					<Right />
				</Header>
			)
		};
  }
```

在列表统计模块内部的触发事件可分为以下几类。

* 点击日历上的具体日期
  * 此时更新状态中的年、月、日，对应到该日期，通过年月日筛选出该日期下的账目
  * 触发从当前视图`MonthsView_`转移到`MonthsDetailView`的事件
* 点击日历的左右切换月份按钮
  * 更新状态中的月
  * 更新当前月的总收入和总支出

```javascript
  const mapDispatchToProps = (dispatch) => ({
      onClick: (day, callBack) => {
          dispatch({ type: 'year_select', year: day.year });
          dispatch({ type: 'month_select', month: day.month });
          dispatch({ type: 'day_select', day: day.day });
          dispatch({ type: 'month_watch', callBack: callBack })
          console.log('WATCH');
      },
      onChange: (month) => {
          dispatch({ type: 'month_change', month: month.month });
      },
      onIncome: (accounts) => {
          dispatch({ type: 'month_income', accounts: accounts });
      },
      onExpense: (accounts) => {
          dispatch({ type: 'month_expense', accounts: accounts });
      },
  });
```

点击某一具体日期后，查看具体账目所涉及的逻辑在`MonthsDetail.js`中。
在`AccountData`这一对象类型数据中，`date`域为形如`"YYYY-MM-DD"`的字符串。
需要注意的是，诸如`6`、`7`月在字符串中也会变为`06`、`07`。据此可以写出筛选当日账目并按具体时间排序显示的逻辑。

```javascript
        var res = [];
        for (var i = 0; i < accounts.length; ++ i) {
            if ((month < 10 && year + "-0" + month + "-" + day == accounts[i].date) ||
            (month >= 10 && year + "-" + month + "-" + day == accounts[i].date )) {
                res.push(accounts[i]);
            }
        }
        res.sort(function(a, b){return a.time - b.time});
```

### 图表统计模块

我们以饼状图展现每月中，各收入/支出类别在当月总收入/支出的占比。

在`react-native-chart-kit`中，`PieChart`组件能够满足我们的需求。
在`StatisticsReducer.js`中，保存的状态用于图表统计模块的制图。
与列表统计模块不同的是，图表统计模块中使用`CalendarList`，无需点按左右箭头按钮切换月份，而是直接左右滑动屏幕即可。

状态中，`categories`中参与统计的收支类型需要与之前记账模块中内置的类型保持一致，`income`和`expense`两个数据分别用于收入图和支出图。
但因为所有数据全部为`0`时，在渲染时会报错，因此我们暂时将“其他”项这里修改为非`0`。
这只是权宜之计，实际统计后往往会被覆盖掉。

```javascript
  const INITIAL_STATE = {
    month: moment().format('YYYY-MM'),
    categories: [
      { name: '购物', income: 0, expense: 0, },
      { name: '餐饮', income: 0, expense: 0, },
      { name: '服装', income: 0, expense: 0, },
      { name: '生活', income: 0, expense: 0, },
      { name: '教育', income: 0, expense: 0, },
      { name: '娱乐', income: 0, expense: 0, },
      { name: '出行', income: 0, expense: 0, },
      { name: '医疗', income: 0, expense: 0, },
      { name: '投资', income: 0, expense: 0, },
      { name: '其他', income: 1, expense: 1, },
    ],
    yearData: [],
  };
```

我们分别对总收入占比和总支出占比进行饼状图制图。

```javascript
    <H3 style={{paddingLeft: 50,}}>月收入统计</H3>
    <PieChart
      data={ctg_income}
      width={450}
      height={300}
      accessor='population'
      backgroundColor='transparent'
      paddingLeft={30}
      chartConfig={{
        color: (opacity = 0) => `rgba(26, 255, 146, ${opacity})`,
      }}
    />

    <H3 style={{paddingLeft: 50,}}>月支出统计</H3>
    <PieChart
      data={ctg_expense}
      width={450}
      height={300}
      accessor='population'
      backgroundColor='transparent'
      paddingLeft={30}
      chartConfig={{
        color: (opacity = 0) => `rgba(26, 255, 146, ${opacity})`,
      }}
    />
```

最后，在切换月份使得`month`状态刷新时，我们也要能即时刷新图表显示。这一步的逻辑与列表统计模块类似。
首先更新`month`属性，然后用更新过的时间属性筛选出对应时间范围内的账目，用它们更新`categories`中的各条目的收入支出。

### 云端书记同步模块


# 系统可能的拓展

导出功能。将选定日期范围内的账目导出至`.csv`或`.xls`格式的文件中，并能方便转移到其他平台。

设置功能。制定多套显示模式、UI界面等，让用户自定义自己的记账软件。

# 总结体会